// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

namespace Service.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211102090851_Fix_Database")]
    partial class Fix_Database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "3375dc1e-b359-403e-9f13-5e2b395ffafc", AccessFailedCount = 0, ConcurrencyStamp = "87a8044e-e993-4612-ac7f-9eee8e76ee1a", Email = "t.abdelmajid@Alexsys.solutions", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "T.ABDELMAJID@ALEXSYS.SOLUTIONS", NormalizedUserName = "ADMIN", PasswordHash = "AQAAAAEAACcQAAAAEJuAbu9pIbJpG1L/r6AHUH82tdxF/v1IfUlUT9RgmQkdi52M6dF9JzMR1vSmH9b/DA==", PhoneNumberConfirmed = false, SecurityStamp = "78806f6d-7f1f-4d2f-9a13-ce06383ed217", TwoFactorEnabled = false, UserName = "admin" },
                        new { Id = "7167d11d-9358-4262-b7a4-77372e1c121d", AccessFailedCount = 0, ConcurrencyStamp = "e21db10e-ba02-40f5-9fc3-c23606f022fc", EmailConfirmed = false, LockoutEnabled = false, NormalizedUserName = "CHEFDEVENTE", PasswordHash = "AQAAAAEAACcQAAAAEO6g7Yr/lKYYAvFPnN3zvHXi8Ox29kkMqo7mDkxjmtmCcZ4sjlrCpg/6ZPp41jiPVw==", PhoneNumberConfirmed = false, SecurityStamp = "45a41cea-397f-4837-9706-945073586524", TwoFactorEnabled = false, UserName = "chefdevente" },
                        new { Id = "2e142fe7-a372-4b98-ab9d-dcc4e4966b88", AccessFailedCount = 0, ConcurrencyStamp = "4d1df2f9-25e8-491e-8b6e-e098c2afcc04", EmailConfirmed = false, LockoutEnabled = false, NormalizedUserName = "RESPONSABLECOMMERCIAL", PasswordHash = "AQAAAAEAACcQAAAAEONybaAB/MPYjd3jhNUi8KNag0rCY+/Uiyw2LSJMry9yduDAo1jXFNPY8X25HTIyuw==", PhoneNumberConfirmed = false, SecurityStamp = "925b8781-e141-4f60-9dfc-293d3e24b78f", TwoFactorEnabled = false, UserName = "responsablecommercial" },
                        new { Id = "b8888a0f-ebcf-4b0a-815a-83ccc0a4c349", AccessFailedCount = 0, ConcurrencyStamp = "315fd0d5-1791-4493-8420-5995cd05a046", EmailConfirmed = false, LockoutEnabled = false, NormalizedUserName = "DABPE", PasswordHash = "AQAAAAEAACcQAAAAEK1rtoh1Af549r9yFGRWgPOWWJgdN92QvOgWXYeoc/d/fm7naOn+B39RIT8mqjVVyQ==", PhoneNumberConfirmed = false, SecurityStamp = "54227a7c-67ee-4ebb-b9d0-272ccb30e483", TwoFactorEnabled = false, UserName = "dabpe" },
                        new { Id = "3e45b10c-0d15-49f2-903b-7de4bbc62f98", AccessFailedCount = 0, ConcurrencyStamp = "e00a4ca0-83d7-4bb9-a0d8-e6a36441ae3f", EmailConfirmed = false, LockoutEnabled = false, NormalizedUserName = "PRESCRIPTEURTECHNIQUE", PasswordHash = "AQAAAAEAACcQAAAAEMnp5hcVUDCwkS3GLZXhXUDV2rZRwxdn0J/W0ISaOZpAEJgCmsohQLO0NU48HtH28w==", PhoneNumberConfirmed = false, SecurityStamp = "58053aac-a438-4e44-acce-4f967d8df300", TwoFactorEnabled = false, UserName = "prescripteurtechnique" },
                        new { Id = "d19f9bc1-13b4-42b3-881a-a847f4c0684e", AccessFailedCount = 0, ConcurrencyStamp = "cfbc54c7-1003-4cb2-9f4a-c02d8259d99c", EmailConfirmed = false, LockoutEnabled = false, NormalizedUserName = "RESPONSABLELOGISTIQUE", PasswordHash = "AQAAAAEAACcQAAAAEISw5jXHRnAXTXe2C1Sqc2u/ejnDBVXydinPa08FFOdAjnivU8sAK+bAI/tklzMQ8A==", PhoneNumberConfirmed = false, SecurityStamp = "adf0467d-bf4f-4bf5-a576-078dac83af6b", TwoFactorEnabled = false, UserName = "responsablelogistique" },
                        new { Id = "fe1300d0-ecf8-4bb5-afaf-5030b27959bd", AccessFailedCount = 0, ConcurrencyStamp = "575d3efd-7888-48eb-8fb8-1e08b2e25fe9", EmailConfirmed = false, LockoutEnabled = false, NormalizedUserName = "ADMINISTRATIONDESVENTES", PasswordHash = "AQAAAAEAACcQAAAAEHgT3YPKaoXR2y2E3u+sjcfkQ/2u/CTkOJkY28Q2YUOO1glXU6Yvkn060GMzgfucJA==", PhoneNumberConfirmed = false, SecurityStamp = "02d7a2a5-9486-4980-b031-b1728f9125f1", TwoFactorEnabled = false, UserName = "administration des ventes" },
                        new { Id = "48e50810-f7fc-45c8-8d13-0a03a6a8b1de", AccessFailedCount = 0, ConcurrencyStamp = "29711267-34e0-4439-9f5a-f190442fea29", EmailConfirmed = false, LockoutEnabled = false, NormalizedUserName = "CONTROLECREDIT", PasswordHash = "AQAAAAEAACcQAAAAENUW8UgSsdMKer1Tl2uWXyr6zToTk1snLlX0y6gPPtpFvV40mwDdkWDHBhw4UZpLKg==", PhoneNumberConfirmed = false, SecurityStamp = "8e031d55-7c1e-4a55-896b-288a6f628ecd", TwoFactorEnabled = false, UserName = "controlecredit" }
                    );
                });

            modelBuilder.Entity("Domain.Entities.Article", b =>
                {
                    b.Property<int>("Article_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Tarif");

                    b.HasKey("Article_Id");

                    b.ToTable("Article");

                    b.HasData(
                        new { Article_Id = 1, Designation = "Beton 1", Tarif = 50.0 },
                        new { Article_Id = 2, Designation = "Beton 2", Tarif = 60.0 },
                        new { Article_Id = 3, Designation = "Beton 3", Tarif = 70.0 },
                        new { Article_Id = 4, Designation = "Beton Spécial" }
                    );
                });

            modelBuilder.Entity("Domain.Entities.CentraleBeton", b =>
                {
                    b.Property<int>("Ctr_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ctr_Adresse");

                    b.Property<int?>("Ctr_CodePostal");

                    b.Property<string>("Ctr_Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ctr_Gsm")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ctr_Latiture")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctr_Longitude")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctr_Nom")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ctr_Responsable")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ctr_Responsable_Gsm")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Ctr_Ville_Id");

                    b.Property<decimal?>("Rayon");

                    b.HasKey("Ctr_Id");

                    b.HasIndex("Ctr_Ville_Id");

                    b.ToTable("Centrale_Beton");

                    b.HasData(
                        new { Ctr_Id = 1, Ctr_Adresse = "Adresse 1", Ctr_CodePostal = 20250, Ctr_Email = "Centrale1@gmail.com", Ctr_Gsm = "0620055784", Ctr_Longitude = "-7.618710247586268", Ctr_Nom = "Centrale 1", Ctr_Responsable = "Test", Ctr_Responsable_Gsm = "0620055784", Ctr_Ville_Id = 2 },
                        new { Ctr_Id = 2, Ctr_Adresse = "Adresse 2", Ctr_CodePostal = 20250, Ctr_Email = "Centrale2@gmail.com", Ctr_Gsm = "0520055784", Ctr_Longitude = "-7.533456", Ctr_Nom = "Centrale 2", Ctr_Responsable = "Test 2", Ctr_Responsable_Gsm = "0625255784", Ctr_Ville_Id = 2 },
                        new { Ctr_Id = 3, Ctr_Adresse = "Adresse 3", Ctr_CodePostal = 20256, Ctr_Email = "Centrale3@gmail.com", Ctr_Gsm = "0525055784", Ctr_Longitude = "-7,6738", Ctr_Nom = "Centrale 3", Ctr_Responsable = "Test 3", Ctr_Responsable_Gsm = "0625285784", Ctr_Ville_Id = 2 }
                    );
                });

            modelBuilder.Entity("Domain.Entities.Chantier", b =>
                {
                    b.Property<int>("Ctn_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CentraleBetonCtr_Id");

                    b.Property<string>("Ctn_Adresse")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Ctn_Ctr_Id");

                    b.Property<string>("Ctn_Latiture")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctn_Longitude")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctn_Nom")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Ctn_Tc_Id");

                    b.Property<int>("Ctn_Zone_Id");

                    b.Property<string>("Ctr_Nom");

                    b.Property<decimal>("Duree");

                    b.Property<string>("MaitreOuvrage");

                    b.Property<decimal>("Rayon");

                    b.Property<int?>("TypeChantierTc_Id");

                    b.Property<decimal>("VolumePrevisonnel");

                    b.HasKey("Ctn_Id");

                    b.HasIndex("CentraleBetonCtr_Id");

                    b.HasIndex("Ctn_Zone_Id");

                    b.HasIndex("TypeChantierTc_Id");

                    b.ToTable("Chantier");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int>("Client_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Client_Ctn_Id");

                    b.Property<string>("Cnie")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeClientSap")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Destinataire_Interlocuteur")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FormeJuridique_Id");

                    b.Property<string>("Gsm")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ice")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdPays");

                    b.Property<int>("IdVille");

                    b.Property<string>("RaisonSociale")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Client_Id");

                    b.HasIndex("Client_Ctn_Id");

                    b.HasIndex("FormeJuridique_Id");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdVille");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Domain.Entities.Commande", b =>
                {
                    b.Property<int>("IdCommande")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeClientSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CodeCommandeSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Conditions");

                    b.Property<string>("Currency");

                    b.Property<DateTime?>("DateCommande")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DateLivraisonSouhaite")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("DelaiPaiementDelai_Id");

                    b.Property<int>("Delai_Paiement_Id");

                    b.Property<int?>("IdClient");

                    b.Property<int?>("IdStatut");

                    b.Property<decimal?>("MontantCommande");

                    b.Property<double>("TarifPompage");

                    b.Property<double>("TarifTransport");

                    b.HasKey("IdCommande");

                    b.HasIndex("DelaiPaiementDelai_Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdStatut");

                    b.ToTable("Commande");
                });

            modelBuilder.Entity("Domain.Entities.DelaiPaiement", b =>
                {
                    b.Property<int>("Delai_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Delai_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Delai_Id");

                    b.ToTable("Delai_Paiement");
                });

            modelBuilder.Entity("Domain.Entities.DetailCommande", b =>
                {
                    b.Property<int>("IdDetailCommande")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeArticleSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CodeCommandeSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("DateProduction");

                    b.Property<int?>("IdArticle");

                    b.Property<int?>("IdCommande");

                    b.Property<decimal?>("Montant");

                    b.Property<int?>("UniteIdUnite");

                    b.HasKey("IdDetailCommande");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdCommande");

                    b.HasIndex("UniteIdUnite");

                    b.ToTable("DetailCommande");
                });

            modelBuilder.Entity("Domain.Entities.FormeJuridique", b =>
                {
                    b.Property<int>("FormeJuridique_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormeJuridique_Libelle")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("FormeJuridique_Id");

                    b.ToTable("Forme_Juridique");

                    b.HasData(
                        new { FormeJuridique_Id = 1, FormeJuridique_Libelle = "SA" },
                        new { FormeJuridique_Id = 2, FormeJuridique_Libelle = "SARL" }
                    );
                });

            modelBuilder.Entity("Domain.Entities.Paiement", b =>
                {
                    b.Property<int>("Paiement_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Paiement_Id");

                    b.ToTable("Paiement");
                });

            modelBuilder.Entity("Domain.Entities.Pays", b =>
                {
                    b.Property<int>("IdPays")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodePaysSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NomPays")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPays");

                    b.ToTable("Pays");

                    b.HasData(
                        new { IdPays = 1, CodePaysSap = "MA", NomPays = "Maroc" }
                    );
                });

            modelBuilder.Entity("Domain.Entities.Statut", b =>
                {
                    b.Property<int>("IdStatut")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeStatutSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdStatut");

                    b.ToTable("Statut");

                    b.HasData(
                        new { IdStatut = 1, CodeStatutSap = "1", Libelle = "Validation de l'offre de prix" },
                        new { IdStatut = 2, CodeStatutSap = "2", Libelle = "Validé" }
                    );
                });

            modelBuilder.Entity("Domain.Entities.TarifBetonRef", b =>
                {
                    b.Property<int>("Tbr_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Designation_Beton");

                    b.Property<double>("Tarif");

                    b.HasKey("Tbr_Id");

                    b.ToTable("Tarif_Ref");
                });

            modelBuilder.Entity("Domain.Entities.TarifPompeRef", b =>
                {
                    b.Property<int>("Tpr_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LongFleche_Libelle");

                    b.Property<decimal>("LongFleche_Prix");

                    b.HasKey("Tpr_Id");

                    b.ToTable("Tarif_Pompe");

                    b.HasData(
                        new { Tpr_Id = 1, LongFleche_Libelle = "48", LongFleche_Prix = 50m },
                        new { Tpr_Id = 2, LongFleche_Libelle = "50", LongFleche_Prix = 60m },
                        new { Tpr_Id = 3, LongFleche_Libelle = "52", LongFleche_Prix = 70m }
                    );
                });

            modelBuilder.Entity("Domain.Entities.TarifService", b =>
                {
                    b.Property<int>("TS_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("TarifPompage");

                    b.Property<double>("TarifTransport");

                    b.HasKey("TS_Id");

                    b.ToTable("Tarif_Service");
                });

            modelBuilder.Entity("Domain.Entities.TypeChantier", b =>
                {
                    b.Property<int>("Tc_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tc_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Tc_Id");

                    b.ToTable("Type_Chantier");

                    b.HasData(
                        new { Tc_Id = 1, Tc_Libelle = "Type 1" },
                        new { Tc_Id = 2, Tc_Libelle = "Type 2" },
                        new { Tc_Id = 3, Tc_Libelle = "Type 3" }
                    );
                });

            modelBuilder.Entity("Domain.Entities.Unite", b =>
                {
                    b.Property<int>("IdUnite")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdUnite");

                    b.ToTable("Unite");

                    b.HasData(
                        new { IdUnite = 1, Libelle = "m3" }
                    );
                });

            modelBuilder.Entity("Domain.Entities.Ville", b =>
                {
                    b.Property<int>("IdVille")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodePaysSap");

                    b.Property<string>("CodeVilleSap")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("IdPays");

                    b.Property<string>("NomVille")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdVille");

                    b.HasIndex("IdPays");

                    b.ToTable("Ville");

                    b.HasData(
                        new { IdVille = 1, CodePaysSap = "MA", CodeVilleSap = "R", IdPays = 1, NomVille = "Rabat" },
                        new { IdVille = 2, CodePaysSap = "MA", CodeVilleSap = "C", IdPays = 1, NomVille = "Casablanca" }
                    );
                });

            modelBuilder.Entity("Domain.Entities.Zone", b =>
                {
                    b.Property<int>("Zone_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Zone_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Zone_Prix");

                    b.HasKey("Zone_Id");

                    b.ToTable("Zone");

                    b.HasData(
                        new { Zone_Id = 1, Zone_Libelle = "Zone 1", Zone_Prix = 50m },
                        new { Zone_Id = 2, Zone_Libelle = "Zone 2", Zone_Prix = 60m },
                        new { Zone_Id = 3, Zone_Libelle = "Zone 3", Zone_Prix = 70m }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "48e33a01-bd1f-4739-a27f-126e8e8b2d1c", ConcurrencyStamp = "cbfbd6f2-2af0-4767-996e-6b49beabfc32", Name = "Admin", NormalizedName = "ADMIN" },
                        new { Id = "1588b3b9-37bc-4f58-acf9-e42fd47f1c28", ConcurrencyStamp = "adfa6540-cc06-46f5-9dde-969e07bd64e3", Name = "Chef de ventes", NormalizedName = "CHEF DE VENTES" },
                        new { Id = "6eafdfbe-ed07-4687-9d2c-0b767b15a305", ConcurrencyStamp = "80fc5fb6-7a7a-4339-b327-e757c735f4ad", Name = "Responsable commercial", NormalizedName = "RESPONSABLE COMMERCIAL" },
                        new { Id = "9be024db-d122-4cd2-8329-2afd0d259e77", ConcurrencyStamp = "c38b1735-dd2b-451c-a5c1-6a633784d5b7", Name = "DA BPE", NormalizedName = "DA BPE" },
                        new { Id = "126a635b-d763-48bf-ab0e-f5599cffb4fe", ConcurrencyStamp = "8af2f4d4-73bc-4574-98c9-36f33507a593", Name = "Prescripteur technique", NormalizedName = "PRESCRIPTEUR TECHNIQUE" },
                        new { Id = "a7846740-cb77-4d25-8da6-d5c68dfb590d", ConcurrencyStamp = "9e938259-b411-4d9b-8056-0f2086febbb9", Name = "Responsable logistique", NormalizedName = "RESPONSABLE LOGISTIQUE" },
                        new { Id = "3e130fc1-981e-4183-a12d-fa5f73d13bb2", ConcurrencyStamp = "2e664718-fe8c-44a8-baa2-887a648a5d2f", Name = "Administration des ventes", NormalizedName = "ADMINISTRATION DES VENTES" },
                        new { Id = "7b8ab704-463e-4074-8c19-a62905f62e11", ConcurrencyStamp = "3930d8a4-2b4f-4868-b869-8bac5ed74664", Name = "Controle crédit", NormalizedName = "CONTROLE CREDIT" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "3375dc1e-b359-403e-9f13-5e2b395ffafc", RoleId = "48e33a01-bd1f-4739-a27f-126e8e8b2d1c" },
                        new { UserId = "7167d11d-9358-4262-b7a4-77372e1c121d", RoleId = "1588b3b9-37bc-4f58-acf9-e42fd47f1c28" },
                        new { UserId = "2e142fe7-a372-4b98-ab9d-dcc4e4966b88", RoleId = "6eafdfbe-ed07-4687-9d2c-0b767b15a305" },
                        new { UserId = "b8888a0f-ebcf-4b0a-815a-83ccc0a4c349", RoleId = "9be024db-d122-4cd2-8329-2afd0d259e77" },
                        new { UserId = "3e45b10c-0d15-49f2-903b-7de4bbc62f98", RoleId = "126a635b-d763-48bf-ab0e-f5599cffb4fe" },
                        new { UserId = "d19f9bc1-13b4-42b3-881a-a847f4c0684e", RoleId = "a7846740-cb77-4d25-8da6-d5c68dfb590d" },
                        new { UserId = "fe1300d0-ecf8-4bb5-afaf-5030b27959bd", RoleId = "3e130fc1-981e-4183-a12d-fa5f73d13bb2" },
                        new { UserId = "48e50810-f7fc-45c8-8d13-0a03a6a8b1de", RoleId = "7b8ab704-463e-4074-8c19-a62905f62e11" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Entities.CentraleBeton", b =>
                {
                    b.HasOne("Domain.Entities.Ville", "VILLE")
                        .WithMany()
                        .HasForeignKey("Ctr_Ville_Id");
                });

            modelBuilder.Entity("Domain.Entities.Chantier", b =>
                {
                    b.HasOne("Domain.Entities.CentraleBeton", "CentraleBeton")
                        .WithMany()
                        .HasForeignKey("CentraleBetonCtr_Id");

                    b.HasOne("Domain.Entities.Zone", "ZONE_CHANTIER")
                        .WithMany()
                        .HasForeignKey("Ctn_Zone_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.TypeChantier", "TypeChantier")
                        .WithMany()
                        .HasForeignKey("TypeChantierTc_Id");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Domain.Entities.Chantier", "Chantier")
                        .WithMany()
                        .HasForeignKey("Client_Ctn_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.FormeJuridique", "FormeJuridique")
                        .WithMany()
                        .HasForeignKey("FormeJuridique_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("IdPays")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("IdVille")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Commande", b =>
                {
                    b.HasOne("Domain.Entities.DelaiPaiement", "DelaiPaiement")
                        .WithMany()
                        .HasForeignKey("DelaiPaiementDelai_Id");

                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient");

                    b.HasOne("Domain.Entities.Statut", "Statut")
                        .WithMany()
                        .HasForeignKey("IdStatut");
                });

            modelBuilder.Entity("Domain.Entities.DetailCommande", b =>
                {
                    b.HasOne("Domain.Entities.Article", "Article")
                        .WithMany()
                        .HasForeignKey("IdArticle");

                    b.HasOne("Domain.Entities.Commande", "Commande")
                        .WithMany("DetailCommandes")
                        .HasForeignKey("IdCommande");

                    b.HasOne("Domain.Entities.Unite", "Unite")
                        .WithMany()
                        .HasForeignKey("UniteIdUnite");
                });

            modelBuilder.Entity("Domain.Entities.Ville", b =>
                {
                    b.HasOne("Domain.Entities.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("IdPays");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
